// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cockroach

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allow list of IP range
type AllowList struct {
	pulumi.CustomResourceState

	CidrIp    pulumi.StringOutput    `pulumi:"cidrIp"`
	CidrMask  pulumi.IntOutput       `pulumi:"cidrMask"`
	ClusterId pulumi.StringOutput    `pulumi:"clusterId"`
	Name      pulumi.StringPtrOutput `pulumi:"name"`
	Sql       pulumi.BoolOutput      `pulumi:"sql"`
	Ui        pulumi.BoolOutput      `pulumi:"ui"`
}

// NewAllowList registers a new resource with the given unique name, arguments, and options.
func NewAllowList(ctx *pulumi.Context,
	name string, args *AllowListArgs, opts ...pulumi.ResourceOption) (*AllowList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CidrIp == nil {
		return nil, errors.New("invalid value for required argument 'CidrIp'")
	}
	if args.CidrMask == nil {
		return nil, errors.New("invalid value for required argument 'CidrMask'")
	}
	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Sql == nil {
		return nil, errors.New("invalid value for required argument 'Sql'")
	}
	if args.Ui == nil {
		return nil, errors.New("invalid value for required argument 'Ui'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AllowList
	err := ctx.RegisterResource("cockroach:index/allowList:AllowList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAllowList gets an existing AllowList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAllowList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AllowListState, opts ...pulumi.ResourceOption) (*AllowList, error) {
	var resource AllowList
	err := ctx.ReadResource("cockroach:index/allowList:AllowList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AllowList resources.
type allowListState struct {
	CidrIp    *string `pulumi:"cidrIp"`
	CidrMask  *int    `pulumi:"cidrMask"`
	ClusterId *string `pulumi:"clusterId"`
	Name      *string `pulumi:"name"`
	Sql       *bool   `pulumi:"sql"`
	Ui        *bool   `pulumi:"ui"`
}

type AllowListState struct {
	CidrIp    pulumi.StringPtrInput
	CidrMask  pulumi.IntPtrInput
	ClusterId pulumi.StringPtrInput
	Name      pulumi.StringPtrInput
	Sql       pulumi.BoolPtrInput
	Ui        pulumi.BoolPtrInput
}

func (AllowListState) ElementType() reflect.Type {
	return reflect.TypeOf((*allowListState)(nil)).Elem()
}

type allowListArgs struct {
	CidrIp    string  `pulumi:"cidrIp"`
	CidrMask  int     `pulumi:"cidrMask"`
	ClusterId string  `pulumi:"clusterId"`
	Name      *string `pulumi:"name"`
	Sql       bool    `pulumi:"sql"`
	Ui        bool    `pulumi:"ui"`
}

// The set of arguments for constructing a AllowList resource.
type AllowListArgs struct {
	CidrIp    pulumi.StringInput
	CidrMask  pulumi.IntInput
	ClusterId pulumi.StringInput
	Name      pulumi.StringPtrInput
	Sql       pulumi.BoolInput
	Ui        pulumi.BoolInput
}

func (AllowListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*allowListArgs)(nil)).Elem()
}

type AllowListInput interface {
	pulumi.Input

	ToAllowListOutput() AllowListOutput
	ToAllowListOutputWithContext(ctx context.Context) AllowListOutput
}

func (*AllowList) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowList)(nil)).Elem()
}

func (i *AllowList) ToAllowListOutput() AllowListOutput {
	return i.ToAllowListOutputWithContext(context.Background())
}

func (i *AllowList) ToAllowListOutputWithContext(ctx context.Context) AllowListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowListOutput)
}

// AllowListArrayInput is an input type that accepts AllowListArray and AllowListArrayOutput values.
// You can construct a concrete instance of `AllowListArrayInput` via:
//
//	AllowListArray{ AllowListArgs{...} }
type AllowListArrayInput interface {
	pulumi.Input

	ToAllowListArrayOutput() AllowListArrayOutput
	ToAllowListArrayOutputWithContext(context.Context) AllowListArrayOutput
}

type AllowListArray []AllowListInput

func (AllowListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AllowList)(nil)).Elem()
}

func (i AllowListArray) ToAllowListArrayOutput() AllowListArrayOutput {
	return i.ToAllowListArrayOutputWithContext(context.Background())
}

func (i AllowListArray) ToAllowListArrayOutputWithContext(ctx context.Context) AllowListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowListArrayOutput)
}

// AllowListMapInput is an input type that accepts AllowListMap and AllowListMapOutput values.
// You can construct a concrete instance of `AllowListMapInput` via:
//
//	AllowListMap{ "key": AllowListArgs{...} }
type AllowListMapInput interface {
	pulumi.Input

	ToAllowListMapOutput() AllowListMapOutput
	ToAllowListMapOutputWithContext(context.Context) AllowListMapOutput
}

type AllowListMap map[string]AllowListInput

func (AllowListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AllowList)(nil)).Elem()
}

func (i AllowListMap) ToAllowListMapOutput() AllowListMapOutput {
	return i.ToAllowListMapOutputWithContext(context.Background())
}

func (i AllowListMap) ToAllowListMapOutputWithContext(ctx context.Context) AllowListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowListMapOutput)
}

type AllowListOutput struct{ *pulumi.OutputState }

func (AllowListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowList)(nil)).Elem()
}

func (o AllowListOutput) ToAllowListOutput() AllowListOutput {
	return o
}

func (o AllowListOutput) ToAllowListOutputWithContext(ctx context.Context) AllowListOutput {
	return o
}

func (o AllowListOutput) CidrIp() pulumi.StringOutput {
	return o.ApplyT(func(v *AllowList) pulumi.StringOutput { return v.CidrIp }).(pulumi.StringOutput)
}

func (o AllowListOutput) CidrMask() pulumi.IntOutput {
	return o.ApplyT(func(v *AllowList) pulumi.IntOutput { return v.CidrMask }).(pulumi.IntOutput)
}

func (o AllowListOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *AllowList) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

func (o AllowListOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AllowList) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o AllowListOutput) Sql() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowList) pulumi.BoolOutput { return v.Sql }).(pulumi.BoolOutput)
}

func (o AllowListOutput) Ui() pulumi.BoolOutput {
	return o.ApplyT(func(v *AllowList) pulumi.BoolOutput { return v.Ui }).(pulumi.BoolOutput)
}

type AllowListArrayOutput struct{ *pulumi.OutputState }

func (AllowListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AllowList)(nil)).Elem()
}

func (o AllowListArrayOutput) ToAllowListArrayOutput() AllowListArrayOutput {
	return o
}

func (o AllowListArrayOutput) ToAllowListArrayOutputWithContext(ctx context.Context) AllowListArrayOutput {
	return o
}

func (o AllowListArrayOutput) Index(i pulumi.IntInput) AllowListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AllowList {
		return vs[0].([]*AllowList)[vs[1].(int)]
	}).(AllowListOutput)
}

type AllowListMapOutput struct{ *pulumi.OutputState }

func (AllowListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AllowList)(nil)).Elem()
}

func (o AllowListMapOutput) ToAllowListMapOutput() AllowListMapOutput {
	return o
}

func (o AllowListMapOutput) ToAllowListMapOutputWithContext(ctx context.Context) AllowListMapOutput {
	return o
}

func (o AllowListMapOutput) MapIndex(k pulumi.StringInput) AllowListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AllowList {
		return vs[0].(map[string]*AllowList)[vs[1].(string)]
	}).(AllowListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AllowListInput)(nil)).Elem(), &AllowList{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowListArrayInput)(nil)).Elem(), AllowListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowListMapInput)(nil)).Elem(), AllowListMap{})
	pulumi.RegisterOutputType(AllowListOutput{})
	pulumi.RegisterOutputType(AllowListArrayOutput{})
	pulumi.RegisterOutputType(AllowListMapOutput{})
}
