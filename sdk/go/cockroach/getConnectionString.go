// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cockroach

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Generic connection string for a given cluster
func GetConnectionString(ctx *pulumi.Context, args *GetConnectionStringArgs, opts ...pulumi.InvokeOption) (*GetConnectionStringResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetConnectionStringResult
	err := ctx.Invoke("cockroach:index/getConnectionString:getConnectionString", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getConnectionString.
type GetConnectionStringArgs struct {
	// Database to connect to. Defaults to 'defaultdb'.
	Database *string `pulumi:"database"`
	// Cluster ID
	Id string  `pulumi:"id"`
	Os *string `pulumi:"os"`
	// Database user password. Must also include `sqlUser`.
	Password *string `pulumi:"password"`
	// Database username.
	SqlUser *string `pulumi:"sqlUser"`
}

// A collection of values returned by getConnectionString.
type GetConnectionStringResult struct {
	// List of individual connection string parameters. Can be used to build nonstandard connection strings.
	ConnectionParams map[string]string `pulumi:"connectionParams"`
	// Fully formatted connection string. Assumes the cluster certificate is stored in the default location.
	ConnectionString string `pulumi:"connectionString"`
	// Database to connect to. Defaults to 'defaultdb'.
	Database string `pulumi:"database"`
	// Cluster ID
	Id string `pulumi:"id"`
	Os string `pulumi:"os"`
	// Database user password. Must also include `sqlUser`.
	Password *string `pulumi:"password"`
	// Database username.
	SqlUser *string `pulumi:"sqlUser"`
}

func GetConnectionStringOutput(ctx *pulumi.Context, args GetConnectionStringOutputArgs, opts ...pulumi.InvokeOption) GetConnectionStringResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetConnectionStringResult, error) {
			args := v.(GetConnectionStringArgs)
			r, err := GetConnectionString(ctx, &args, opts...)
			var s GetConnectionStringResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetConnectionStringResultOutput)
}

// A collection of arguments for invoking getConnectionString.
type GetConnectionStringOutputArgs struct {
	// Database to connect to. Defaults to 'defaultdb'.
	Database pulumi.StringPtrInput `pulumi:"database"`
	// Cluster ID
	Id pulumi.StringInput    `pulumi:"id"`
	Os pulumi.StringPtrInput `pulumi:"os"`
	// Database user password. Must also include `sqlUser`.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// Database username.
	SqlUser pulumi.StringPtrInput `pulumi:"sqlUser"`
}

func (GetConnectionStringOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConnectionStringArgs)(nil)).Elem()
}

// A collection of values returned by getConnectionString.
type GetConnectionStringResultOutput struct{ *pulumi.OutputState }

func (GetConnectionStringResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConnectionStringResult)(nil)).Elem()
}

func (o GetConnectionStringResultOutput) ToGetConnectionStringResultOutput() GetConnectionStringResultOutput {
	return o
}

func (o GetConnectionStringResultOutput) ToGetConnectionStringResultOutputWithContext(ctx context.Context) GetConnectionStringResultOutput {
	return o
}

// List of individual connection string parameters. Can be used to build nonstandard connection strings.
func (o GetConnectionStringResultOutput) ConnectionParams() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetConnectionStringResult) map[string]string { return v.ConnectionParams }).(pulumi.StringMapOutput)
}

// Fully formatted connection string. Assumes the cluster certificate is stored in the default location.
func (o GetConnectionStringResultOutput) ConnectionString() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionStringResult) string { return v.ConnectionString }).(pulumi.StringOutput)
}

// Database to connect to. Defaults to 'defaultdb'.
func (o GetConnectionStringResultOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionStringResult) string { return v.Database }).(pulumi.StringOutput)
}

// Cluster ID
func (o GetConnectionStringResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionStringResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetConnectionStringResultOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v GetConnectionStringResult) string { return v.Os }).(pulumi.StringOutput)
}

// Database user password. Must also include `sqlUser`.
func (o GetConnectionStringResultOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetConnectionStringResult) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// Database username.
func (o GetConnectionStringResultOutput) SqlUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetConnectionStringResult) *string { return v.SqlUser }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetConnectionStringResultOutput{})
}
