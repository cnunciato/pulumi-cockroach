// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ClusterDedicated {
    diskIops: number;
    machineType: string;
    memoryGib: number;
    numVirtualCpus: number;
    /**
     * Set to true to assign private IP addresses to nodes. Required for CMEK and other advanced networking features.
     */
    privateNetworkVisibility: boolean;
    storageGib: number;
}

export interface ClusterRegion {
    /**
     * Name of cluster
     */
    name: string;
    nodeCount: number;
    /**
     * Set to true to mark this region as the primary for a Serverless cluster. Exactly one region must be primary. Dedicated clusters expect to have no primary region.
     */
    primary: boolean;
    sqlDns: string;
    uiDns: string;
}

export interface ClusterServerless {
    routingId: string;
    /**
     * Spend limit in US cents.
     */
    spendLimit?: number;
    usageLimits?: outputs.ClusterServerlessUsageLimits;
}

export interface ClusterServerlessUsageLimits {
    requestUnitLimit: number;
    storageMibLimit: number;
}

export interface CmekAdditionalRegion {
    name: string;
    nodeCount: number;
    /**
     * Set to true to mark this region as the primary for a Serverless cluster. Exactly one region must be primary. Dedicated clusters expect to have no primary region.
     */
    primary: boolean;
    sqlDns: string;
    uiDns: string;
}

export interface CmekRegion {
    key: outputs.CmekRegionKey;
    region: string;
    /**
     * Aggregated status of the cluster's encryption key(s)
     */
    status: string;
}

export interface CmekRegionKey {
    authPrincipal: string;
    createdAt: string;
    /**
     * Aggregated status of the cluster's encryption key(s)
     */
    status: string;
    type: string;
    updatedAt: string;
    uri: string;
    userMessage: string;
}

export interface GetCockroachClusterDedicated {
    diskIops: number;
    machineType: string;
    memoryGib: number;
    numVirtualCpus: number;
    privateNetworkVisibility: boolean;
    storageGib: number;
}

export interface GetCockroachClusterRegion {
    /**
     * Name of cluster
     */
    name: string;
    nodeCount: number;
    primary: boolean;
    sqlDns: string;
    uiDns: string;
}

export interface GetCockroachClusterServerless {
    routingId: string;
    spendLimit: number;
    usageLimits: outputs.GetCockroachClusterServerlessUsageLimits;
}

export interface GetCockroachClusterServerlessUsageLimits {
    requestUnitLimit: number;
    storageMibLimit: number;
}

export interface LogExportConfigGroup {
    /**
     * A list of CRDB log channels to include in this group
     */
    channels: string[];
    /**
     * The name of the group, reflected in the log sink
     */
    logName: string;
    /**
     * The minimum log level to filter to this log group
     */
    minLevel?: string;
    /**
     * Governs whether this log group should aggregate redacted logs if unset
     */
    redact: boolean;
}

export interface PrivateEndpointServicesService {
    aws: outputs.PrivateEndpointServicesServiceAws;
    cloudProvider: string;
    regionName: string;
    status: string;
}

export interface PrivateEndpointServicesServiceAws {
    availabilityZoneIds: string[];
    serviceId: string;
    serviceName: string;
}

export interface UserRoleGrantsRole {
    resourceId?: string;
    resourceType: string;
    roleName: string;
}

